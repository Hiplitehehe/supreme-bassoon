/// <reference types="node" />
import EventEmitter from "events";
import type { PrefixSupplier } from "../struct/commands/CommandHandler";
/**
 * Akairo Utilities.
 */
export declare class Util {
    /**
     * Deep assign properties to an object.
     * @param target The object to assign values to.
     * @param os The objects to assign from.
     */
    static deepAssign<A, B>(target: A, ...os: B[]): A;
    /**
     * Converts the supplied value into an array if it is not already one.
     * @param x - Value to convert.
     */
    static intoArray<T>(x: T | T[]): T[];
    /**
     * Converts something to become callable.
     * @param thing - What to turn into a callable.
     * @returns - The callable.
     */
    static intoCallable<T>(thing: T | ((...args: any[]) => T)): (...args: any[]) => T;
    /**
     * Checks if the supplied value is an event emitter.
     * @param value - Value to check.
     * @returns - Whether the value is an event emitter.
     */
    static isEventEmitter(value: unknown): value is EventEmitter;
    /**
     * Checks if the supplied value is a promise.
     * @param value - Value to check.
     * @returns - Whether the value is a promise.
     */
    static isPromise<T>(value: T | Promise<T>): value is Promise<T>;
    /**
     * Compares two prefixes.
     * @param aKey - First prefix.
     * @param bKey - Second prefix.
     * @returns - Comparison result.
     */
    static prefixCompare(aKey: string | PrefixSupplier, bKey: string | PrefixSupplier): number;
    /**
     * Compares each property of two objects to determine if they are equal.
     * @param a - First value.
     * @param b - Second value.
     * @param ignoreUndefined - Whether to ignore undefined properties.
     * @returns Whether the two values are equal.
     */
    static deepEquals<T>(a: unknown, b: T, options?: DeepEqualsOptions): a is T;
    /**
     * Converts a string in snake_case to camelCase.
     * @param str The string to convert.
     */
    static snakeToCamelCase(str: string): string;
    /**
     * Converts a string in PascalCase to camelCase.
     * @param str The string to convert.
     */
    static pascalToCamelCase(str: string): string;
    /**
     * Checks if `array` is an array and its elements are typeof of `type`
     * @param array The array to check.
     * @param type The type to check the elements' type against.
     * @returns Whether the array is an array and its elements are typeof of `type`.
     */
    static isArrayOf<T>(array: T[], type: "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"): boolean;
}
/**
 * Checks if a value is a string, an array of strings, or a function
 * @internal
 */
export declare function isStringArrayStringOrFunc(value: any): value is string | string[] | ((...args: any[]) => any);
export interface DeepEqualsOptions {
    /**
     * Whether to ignore undefined properties.
     * @default true
     */
    ignoreUndefined?: boolean;
    /**
     * Whether to ignore the order of the items in arrays
     * @default true
     */
    ignoreArrayOrder?: boolean;
}
//# sourceMappingURL=Util.d.ts.map